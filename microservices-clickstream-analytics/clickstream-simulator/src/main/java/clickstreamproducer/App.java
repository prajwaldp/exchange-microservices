/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package clickstreamproducer;

import java.net.*;
import java.util.Properties;
import org.apache.kafka.clients.consumer.Consumer;
import org.apache.kafka.clients.consumer.KafkaConsumer;

import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.KafkaProducer;

import org.apache.kafka.clients.producer.ProducerRecord;

import java.util.concurrent.*;

public class App {
  public String getGreeting() {
    return "Hello world.";
  }

  public static void checkKafkaBrokerConnection(Properties props) {
    Consumer<String, String> consumer = new KafkaConsumer<>(props);
    var topics = consumer.listTopics();
    consumer.close();
  }

  public static void streamSimulatedClickStream(Properties props) {
    Producer<String, String> producer = new KafkaProducer<>(props);

    for (int i = 0; i < 100; i++) {
      System.out.println("sending " + i);
      var pr = new ProducerRecord<String, String>("clickstream", Integer.toString(i), Integer.toString(i));
      try {
        producer.send(pr).get();
      } catch (InterruptedException e1) {
        System.out.println("InterruptedException");
      } catch (ExecutionException e2) {
        System.out.println("ExecutionException " + e2);
      }

    }

    producer.close();
  }

  public static void main(String[] args) {
    System.out.println(new App().getGreeting());

    Properties props = new Properties();
    props.put("bootstrap.servers", "localhost:9092");
    props.put("acks", "all");
    props.put("key.serializer", "org.apache.kafka.common.serialization.StringSerializer");
    props.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");

    props.put("group.id", "test-consumer-group");
    props.setProperty("key.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");
    props.setProperty("value.deserializer", "org.apache.kafka.common.serialization.StringDeserializer");

    checkKafkaBrokerConnection(props);
    streamSimulatedClickStream(props);
  }
}
