plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id "com.google.protobuf" version "0.8.14"
}

repositories {
    // Use JCenter for resolving dependencies.
    jcenter()
}

dependencies {
    testImplementation 'junit:junit:4.13'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.30'
    implementation group: 'org.apache.kafka', name: 'kafka-clients', version: '2.6.0'
    implementation group: 'org.apache.kafka', name: 'kafka-streams', version: '2.6.0'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.3'
    implementation group: 'com.google.protobuf', name: 'protobuf-java', version: '3.14.0'
    implementation group: 'io.grpc', name: 'grpc-all', version: '1.34.0'
}

task datagen(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Run the data generator with ExecTask"
    commandLine "java", "-cp", sourceSets.main.runtimeClasspath.getAsPath(),
        "datagen.RandomFeed"
}

task startOrderMatchingSystem(type: Exec) {
    dependsOn build
    group = "Execution"
    description = "Start the order matching system"
    commandLine "java", "-cp", sourceSets.main.runtimeClasspath.getAsPath(),
        "ordermatchingsystem.Listener"
}

application {
    mainClass = 'datagen.App'
}

protobuf {
  generatedFilesBaseDir = "$projectDir/src"
  
  // Configure the protoc executable
  protoc {
    // Download from repositories - recommended
    artifact = 'com.google.protobuf:protoc:3.14.0'
  }

  plugins {
    // Locate a plugin with name 'grpc'. This step is optional.
    // If you don't locate it, protoc will try to use "protoc-gen-grpc" from
    // system search path.
    grpc {
      artifact = 'io.grpc:protoc-gen-grpc-java:1.34.0'
      // or
      // path = 'tools/protoc-gen-grpc-java'
    }
  }
}
